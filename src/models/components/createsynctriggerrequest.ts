/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type CreateSyncTriggerRequest = {
    /**
     * The ID of the integration that you established within Nango.
     */
    providerConfigKey: string;
    /**
     * The ID of the connection. If omitted, the syncs will be triggered for all relevant connections.
     */
    connectionId?: string | undefined;
    /**
     * A list of sync names that you wish to trigger.
     */
    syncs: Array<string>;
};

/** @internal */
export namespace CreateSyncTriggerRequest$ {
    export const inboundSchema: z.ZodType<CreateSyncTriggerRequest, z.ZodTypeDef, unknown> = z
        .object({
            provider_config_key: z.string(),
            connection_id: z.string().optional(),
            syncs: z.array(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                provider_config_key: "providerConfigKey",
                connection_id: "connectionId",
            });
        });

    export type Outbound = {
        provider_config_key: string;
        connection_id?: string | undefined;
        syncs: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSyncTriggerRequest> = z
        .object({
            providerConfigKey: z.string(),
            connectionId: z.string().optional(),
            syncs: z.array(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                providerConfigKey: "provider_config_key",
                connectionId: "connection_id",
            });
        });
}
