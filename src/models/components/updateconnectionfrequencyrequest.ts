/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UpdateConnectionFrequencyRequest = {
    /**
     * The ID of the integration you established within Nango
     */
    providerConfigKey: string;
    /**
     * The ID of the connection
     */
    connectionId: string;
    /**
     * The name of the sync you want to update
     */
    syncName: string;
    /**
     * The frequency you want to set (ex: 'every hour'). Set null to revert to the default frequency
     */
    frequency: string;
};

/** @internal */
export namespace UpdateConnectionFrequencyRequest$ {
    export const inboundSchema: z.ZodType<UpdateConnectionFrequencyRequest, z.ZodTypeDef, unknown> =
        z
            .object({
                provider_config_key: z.string(),
                connection_id: z.string(),
                sync_name: z.string(),
                frequency: z.string(),
            })
            .transform((v) => {
                return remap$(v, {
                    provider_config_key: "providerConfigKey",
                    connection_id: "connectionId",
                    sync_name: "syncName",
                });
            });

    export type Outbound = {
        provider_config_key: string;
        connection_id: string;
        sync_name: string;
        frequency: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateConnectionFrequencyRequest
    > = z
        .object({
            providerConfigKey: z.string(),
            connectionId: z.string(),
            syncName: z.string(),
            frequency: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                providerConfigKey: "provider_config_key",
                connectionId: "connection_id",
                syncName: "sync_name",
            });
        });
}
