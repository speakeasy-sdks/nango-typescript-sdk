/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The current status of the sync.
 */
export enum Status {
    Running = "RUNNING",
    Paused = "PAUSED",
    Stopped = "STOPPED",
    Success = "SUCCESS",
    Error = "ERROR",
}

/**
 * The most recent sync type completed
 */
export enum Type {
    Incremental = "INCREMENTAL",
    Initial = "INITIAL",
}

/**
 * Additional information regarding the latest result of the sync. Contains a model name with added, updated and deleted records
 */
export type LatestResult = {};

export type Syncs = {
    /**
     * The unique identifier for the sync.
     */
    id?: string | undefined;
    /**
     * The name of the sync.
     */
    name?: string | undefined;
    /**
     * The current status of the sync.
     */
    status?: Status | undefined;
    /**
     * The most recent sync type completed
     */
    type?: Type | undefined;
    /**
     * ISO string of the most recently completed sync
     */
    finishedAt?: string | undefined;
    /**
     * ISO string of the next scheduled sync time
     */
    nextScheduledSyncAt?: string | undefined;
    /**
     * The execution frequency of the sync
     */
    frequency?: string | undefined;
    /**
     * Additional information regarding the latest result of the sync. Contains a model name with added, updated and deleted records
     */
    latestResult?: LatestResult | undefined;
};

export type GetSyncStatusResponse = {
    syncs?: Array<Syncs> | undefined;
};

/** @internal */
export namespace Status$ {
    export const inboundSchema = z.nativeEnum(Status);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Type$ {
    export const inboundSchema = z.nativeEnum(Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace LatestResult$ {
    export const inboundSchema: z.ZodType<LatestResult, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LatestResult> = z.object({});
}

/** @internal */
export namespace Syncs$ {
    export const inboundSchema: z.ZodType<Syncs, z.ZodTypeDef, unknown> = z.object({
        id: z.string().optional(),
        name: z.string().optional(),
        status: Status$.inboundSchema.optional(),
        type: Type$.inboundSchema.optional(),
        finishedAt: z.string().optional(),
        nextScheduledSyncAt: z.string().optional(),
        frequency: z.string().optional(),
        latestResult: z.lazy(() => LatestResult$.inboundSchema).optional(),
    });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        status?: string | undefined;
        type?: string | undefined;
        finishedAt?: string | undefined;
        nextScheduledSyncAt?: string | undefined;
        frequency?: string | undefined;
        latestResult?: LatestResult$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Syncs> = z.object({
        id: z.string().optional(),
        name: z.string().optional(),
        status: Status$.outboundSchema.optional(),
        type: Type$.outboundSchema.optional(),
        finishedAt: z.string().optional(),
        nextScheduledSyncAt: z.string().optional(),
        frequency: z.string().optional(),
        latestResult: z.lazy(() => LatestResult$.outboundSchema).optional(),
    });
}

/** @internal */
export namespace GetSyncStatusResponse$ {
    export const inboundSchema: z.ZodType<GetSyncStatusResponse, z.ZodTypeDef, unknown> = z.object({
        syncs: z.array(z.lazy(() => Syncs$.inboundSchema)).optional(),
    });

    export type Outbound = {
        syncs?: Array<Syncs$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSyncStatusResponse> =
        z.object({
            syncs: z.array(z.lazy(() => Syncs$.outboundSchema)).optional(),
        });
}
