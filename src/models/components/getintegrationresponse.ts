/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Config = {};

export type GetIntegrationResponse = {
    config: Config;
    properties?: any | undefined;
};

/** @internal */
export namespace Config$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Config, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Config> = z.object({});
}

/** @internal */
export namespace GetIntegrationResponse$ {
    export type Inbound = {
        config: Config$.Inbound;
        properties?: any | undefined;
    };

    export const inboundSchema: z.ZodType<GetIntegrationResponse, z.ZodTypeDef, Inbound> = z
        .object({
            config: z.lazy(() => Config$.inboundSchema),
            properties: z.any().optional(),
        })
        .transform((v) => {
            return {
                config: v.config,
                ...(v.properties === undefined ? null : { properties: v.properties }),
            };
        });

    export type Outbound = {
        config: Config$.Outbound;
        properties?: any | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetIntegrationResponse> = z
        .object({
            config: z.lazy(() => Config$.outboundSchema),
            properties: z.any().optional(),
        })
        .transform((v) => {
            return {
                config: v.config,
                ...(v.properties === undefined ? null : { properties: v.properties }),
            };
        });
}
