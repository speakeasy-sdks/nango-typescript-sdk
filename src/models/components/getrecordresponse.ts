/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The last action seen on this record
 */
export enum GetRecordResponseLastAction {
    Added = "ADDED",
    Updated = "UPDATED",
    Deleted = "DELETED",
}

export type GetRecordResponseNangoMetadata = {
    /**
     * The timestamp at which Nango detected the record as deleted
     */
    deletedAt?: string | undefined;
    /**
     * The last action seen on this record
     */
    lastAction?: GetRecordResponseLastAction | undefined;
    /**
     * The timestamp at which Nango first saw this record
     */
    firstSeenAt?: string | undefined;
    /**
     * The timestamp at which Nango last detected a change to this record
     */
    lastModifiedAt?: string | undefined;
};

export type Records = {
    /**
     * The data Nango synced in for you
     */
    yourProperties?: string | undefined;
    nangoMetadata?: GetRecordResponseNangoMetadata | undefined;
};

export type GetRecordResponse = {
    records?: Array<Records> | undefined;
    /**
     * The base64-encoded cursor for pagination
     */
    nextCursor?: string | undefined;
};

/** @internal */
export namespace GetRecordResponseLastAction$ {
    export const inboundSchema: z.ZodNativeEnum<typeof GetRecordResponseLastAction> = z.nativeEnum(
        GetRecordResponseLastAction
    );
    export const outboundSchema: z.ZodNativeEnum<typeof GetRecordResponseLastAction> =
        inboundSchema;
}

/** @internal */
export namespace GetRecordResponseNangoMetadata$ {
    export const inboundSchema: z.ZodType<GetRecordResponseNangoMetadata, z.ZodTypeDef, unknown> = z
        .object({
            deleted_at: z.string().optional(),
            last_action: GetRecordResponseLastAction$.inboundSchema.optional(),
            first_seen_at: z.string().optional(),
            last_modified_at: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                deleted_at: "deletedAt",
                last_action: "lastAction",
                first_seen_at: "firstSeenAt",
                last_modified_at: "lastModifiedAt",
            });
        });

    export type Outbound = {
        deleted_at?: string | undefined;
        last_action?: string | undefined;
        first_seen_at?: string | undefined;
        last_modified_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetRecordResponseNangoMetadata> =
        z
            .object({
                deletedAt: z.string().optional(),
                lastAction: GetRecordResponseLastAction$.outboundSchema.optional(),
                firstSeenAt: z.string().optional(),
                lastModifiedAt: z.string().optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    deletedAt: "deleted_at",
                    lastAction: "last_action",
                    firstSeenAt: "first_seen_at",
                    lastModifiedAt: "last_modified_at",
                });
            });
}

/** @internal */
export namespace Records$ {
    export const inboundSchema: z.ZodType<Records, z.ZodTypeDef, unknown> = z
        .object({
            "your-properties": z.string().optional(),
            _nango_metadata: z.lazy(() => GetRecordResponseNangoMetadata$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "your-properties": "yourProperties",
                _nango_metadata: "nangoMetadata",
            });
        });

    export type Outbound = {
        "your-properties"?: string | undefined;
        _nango_metadata?: GetRecordResponseNangoMetadata$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Records> = z
        .object({
            yourProperties: z.string().optional(),
            nangoMetadata: z.lazy(() => GetRecordResponseNangoMetadata$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                yourProperties: "your-properties",
                nangoMetadata: "_nango_metadata",
            });
        });
}

/** @internal */
export namespace GetRecordResponse$ {
    export const inboundSchema: z.ZodType<GetRecordResponse, z.ZodTypeDef, unknown> = z
        .object({
            records: z.array(z.lazy(() => Records$.inboundSchema)).optional(),
            next_cursor: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                next_cursor: "nextCursor",
            });
        });

    export type Outbound = {
        records?: Array<Records$.Outbound> | undefined;
        next_cursor?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetRecordResponse> = z
        .object({
            records: z.array(z.lazy(() => Records$.outboundSchema)).optional(),
            nextCursor: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                nextCursor: "next_cursor",
            });
        });
}
