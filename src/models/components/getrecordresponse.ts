/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The last action seen on this record
 */
export enum GetRecordResponseLastAction {
    Added = "ADDED",
    Updated = "UPDATED",
    Deleted = "DELETED",
}

export type GetRecordResponseNangoMetadata = {
    /**
     * The timestamp at which Nango detected the record as deleted
     */
    deletedAt?: string | undefined;
    /**
     * The last action seen on this record
     */
    lastAction?: GetRecordResponseLastAction | undefined;
    /**
     * The timestamp at which Nango first saw this record
     */
    firstSeenAt?: string | undefined;
    /**
     * The timestamp at which Nango last detected a change to this record
     */
    lastModifiedAt?: string | undefined;
};

export type Records = {
    /**
     * The data Nango synced in for you
     */
    yourProperties?: string | undefined;
    nangoMetadata?: GetRecordResponseNangoMetadata | undefined;
};

export type GetRecordResponse = {
    records?: Array<Records> | undefined;
    /**
     * The base64-encoded cursor for pagination
     */
    nextCursor?: string | undefined;
};

/** @internal */
export const GetRecordResponseLastAction$ = z.nativeEnum(GetRecordResponseLastAction);

/** @internal */
export namespace GetRecordResponseNangoMetadata$ {
    export type Inbound = {
        deleted_at?: string | undefined;
        last_action?: GetRecordResponseLastAction | undefined;
        first_seen_at?: string | undefined;
        last_modified_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetRecordResponseNangoMetadata, z.ZodTypeDef, Inbound> = z
        .object({
            deleted_at: z.string().optional(),
            last_action: GetRecordResponseLastAction$.optional(),
            first_seen_at: z.string().optional(),
            last_modified_at: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.deleted_at === undefined ? null : { deletedAt: v.deleted_at }),
                ...(v.last_action === undefined ? null : { lastAction: v.last_action }),
                ...(v.first_seen_at === undefined ? null : { firstSeenAt: v.first_seen_at }),
                ...(v.last_modified_at === undefined
                    ? null
                    : { lastModifiedAt: v.last_modified_at }),
            };
        });

    export type Outbound = {
        deleted_at?: string | undefined;
        last_action?: GetRecordResponseLastAction | undefined;
        first_seen_at?: string | undefined;
        last_modified_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetRecordResponseNangoMetadata> =
        z
            .object({
                deletedAt: z.string().optional(),
                lastAction: GetRecordResponseLastAction$.optional(),
                firstSeenAt: z.string().optional(),
                lastModifiedAt: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.deletedAt === undefined ? null : { deleted_at: v.deletedAt }),
                    ...(v.lastAction === undefined ? null : { last_action: v.lastAction }),
                    ...(v.firstSeenAt === undefined ? null : { first_seen_at: v.firstSeenAt }),
                    ...(v.lastModifiedAt === undefined
                        ? null
                        : { last_modified_at: v.lastModifiedAt }),
                };
            });
}

/** @internal */
export namespace Records$ {
    export type Inbound = {
        "your-properties"?: string | undefined;
        _nango_metadata?: GetRecordResponseNangoMetadata$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Records, z.ZodTypeDef, Inbound> = z
        .object({
            "your-properties": z.string().optional(),
            _nango_metadata: z.lazy(() => GetRecordResponseNangoMetadata$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v["your-properties"] === undefined
                    ? null
                    : { yourProperties: v["your-properties"] }),
                ...(v._nango_metadata === undefined ? null : { nangoMetadata: v._nango_metadata }),
            };
        });

    export type Outbound = {
        "your-properties"?: string | undefined;
        _nango_metadata?: GetRecordResponseNangoMetadata$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Records> = z
        .object({
            yourProperties: z.string().optional(),
            nangoMetadata: z.lazy(() => GetRecordResponseNangoMetadata$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.yourProperties === undefined
                    ? null
                    : { "your-properties": v.yourProperties }),
                ...(v.nangoMetadata === undefined ? null : { _nango_metadata: v.nangoMetadata }),
            };
        });
}

/** @internal */
export namespace GetRecordResponse$ {
    export type Inbound = {
        records?: Array<Records$.Inbound> | undefined;
        next_cursor?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetRecordResponse, z.ZodTypeDef, Inbound> = z
        .object({
            records: z.array(z.lazy(() => Records$.inboundSchema)).optional(),
            next_cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.records === undefined ? null : { records: v.records }),
                ...(v.next_cursor === undefined ? null : { nextCursor: v.next_cursor }),
            };
        });

    export type Outbound = {
        records?: Array<Records$.Outbound> | undefined;
        next_cursor?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetRecordResponse> = z
        .object({
            records: z.array(z.lazy(() => Records$.outboundSchema)).optional(),
            nextCursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.records === undefined ? null : { records: v.records }),
                ...(v.nextCursor === undefined ? null : { next_cursor: v.nextCursor }),
            };
        });
}
