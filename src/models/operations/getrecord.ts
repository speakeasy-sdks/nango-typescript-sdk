/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * Filter to only show results that have been added or updated or deleted. Helpful when used in conjuction with the delta parameter to retrieve a subset or records that were added, updated, or deleted with the latest sync.
 */
export enum Filter {
    Added = "added",
    Updated = "updated",
    Deleted = "deleted",
}

export type GetRecordRequest = {
    /**
     * The data model to fetch
     */
    model: string;
    /**
     * Timestamp, e.g. 2023-05-31T11:46:13.390Z. If passed only records added or updated after this timestamp are returned, otherwise all records are returned.
     */
    delta?: string | undefined;
    /**
     * The maximum number of records to return. If not passed, all records are returned.
     */
    limit?: number | undefined;
    /**
     * Base 64 encoded value that can be used to fetch the next page of results. The cursor will be included until there are no more results to paginate through.
     *
     * @remarks
     *
     */
    cursor?: string | undefined;
    /**
     * Filter to only show results that have been added or updated or deleted. Helpful when used in conjuction with the delta parameter to retrieve a subset or records that were added, updated, or deleted with the latest sync.
     */
    filter?: Filter | undefined;
    /**
     * The connection ID used to create the connection.
     */
    connectionId: string;
    /**
     * The integration ID used to create the connection (aka Unique Key).
     */
    providerConfigKey: string;
};

/** @internal */
export namespace Filter$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Filter> = z.nativeEnum(Filter);
    export const outboundSchema: z.ZodNativeEnum<typeof Filter> = inboundSchema;
}

/** @internal */
export namespace GetRecordRequest$ {
    export const inboundSchema: z.ZodType<GetRecordRequest, z.ZodTypeDef, unknown> = z
        .object({
            model: z.string(),
            delta: z.string().optional(),
            limit: z.number().int().optional(),
            cursor: z.string().optional(),
            filter: Filter$.inboundSchema.optional(),
            "Connection-Id": z.string(),
            "Provider-Config-Key": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                "Connection-Id": "connectionId",
                "Provider-Config-Key": "providerConfigKey",
            });
        });

    export type Outbound = {
        model: string;
        delta?: string | undefined;
        limit?: number | undefined;
        cursor?: string | undefined;
        filter?: string | undefined;
        "Connection-Id": string;
        "Provider-Config-Key": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetRecordRequest> = z
        .object({
            model: z.string(),
            delta: z.string().optional(),
            limit: z.number().int().optional(),
            cursor: z.string().optional(),
            filter: Filter$.outboundSchema.optional(),
            connectionId: z.string(),
            providerConfigKey: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                connectionId: "Connection-Id",
                providerConfigKey: "Provider-Config-Key",
            });
        });
}
