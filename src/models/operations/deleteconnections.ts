/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type DeleteConnectionsRequest = {
    /**
     * The connection ID used to create the connection.
     */
    connectionId: string;
    /**
     * The integration ID used to create the connection (aka Unique Key).
     */
    providerConfigKey: string;
};

/** @internal */
export namespace DeleteConnectionsRequest$ {
    export const inboundSchema: z.ZodType<DeleteConnectionsRequest, z.ZodTypeDef, unknown> = z
        .object({
            connectionId: z.string(),
            provider_config_key: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                provider_config_key: "providerConfigKey",
            });
        });

    export type Outbound = {
        connectionId: string;
        provider_config_key: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteConnectionsRequest> = z
        .object({
            connectionId: z.string(),
            providerConfigKey: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                providerConfigKey: "provider_config_key",
            });
        });
}
