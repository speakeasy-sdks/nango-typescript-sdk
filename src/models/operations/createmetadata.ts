/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type CreateMetadataRequestBody = {};

export type CreateMetadataRequest = {
    /**
     * The connection ID used to create the connection.
     */
    connectionId: string;
    /**
     * The integration ID used to create the connection (aka Unique Key).
     */
    providerConfigKey: string;
    requestBody: CreateMetadataRequestBody;
};

/** @internal */
export namespace CreateMetadataRequestBody$ {
    export const inboundSchema: z.ZodType<CreateMetadataRequestBody, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateMetadataRequestBody> =
        z.object({});
}

/** @internal */
export namespace CreateMetadataRequest$ {
    export const inboundSchema: z.ZodType<CreateMetadataRequest, z.ZodTypeDef, unknown> = z
        .object({
            connectionId: z.string(),
            "Provider-Config-Key": z.string(),
            RequestBody: z.lazy(() => CreateMetadataRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                "Provider-Config-Key": "providerConfigKey",
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        connectionId: string;
        "Provider-Config-Key": string;
        RequestBody: CreateMetadataRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateMetadataRequest> = z
        .object({
            connectionId: z.string(),
            providerConfigKey: z.string(),
            requestBody: z.lazy(() => CreateMetadataRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                providerConfigKey: "Provider-Config-Key",
                requestBody: "RequestBody",
            });
        });
}
