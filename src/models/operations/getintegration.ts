/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type GetIntegrationRequest = {
    /**
     * The integration ID that you created in Nango.
     */
    providerConfigKey: string;
    /**
     * If true, the response will contain the client ID, secret, scopes, auth_mode and app link - if applicable. include_creds is false by default.
     */
    includeCreds?: boolean | undefined;
};

export type GetIntegrationResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successfully returned an integration
     */
    getIntegrationResponse?: components.GetIntegrationResponse | undefined;
};

/** @internal */
export namespace GetIntegrationRequest$ {
    export type Inbound = {
        providerConfigKey: string;
        include_creds?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetIntegrationRequest, z.ZodTypeDef, Inbound> = z
        .object({
            providerConfigKey: z.string(),
            include_creds: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                providerConfigKey: v.providerConfigKey,
                ...(v.include_creds === undefined ? null : { includeCreds: v.include_creds }),
            };
        });

    export type Outbound = {
        providerConfigKey: string;
        include_creds?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetIntegrationRequest> = z
        .object({
            providerConfigKey: z.string(),
            includeCreds: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                providerConfigKey: v.providerConfigKey,
                ...(v.includeCreds === undefined ? null : { include_creds: v.includeCreds }),
            };
        });
}

/** @internal */
export namespace GetIntegrationResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        GetIntegrationResponse?: components.GetIntegrationResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetIntegrationResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            GetIntegrationResponse: components.GetIntegrationResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.GetIntegrationResponse === undefined
                    ? null
                    : { getIntegrationResponse: v.GetIntegrationResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        GetIntegrationResponse?: components.GetIntegrationResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetIntegrationResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getIntegrationResponse: components.GetIntegrationResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.getIntegrationResponse === undefined
                    ? null
                    : { GetIntegrationResponse: v.getIntegrationResponse }),
            };
        });
}
