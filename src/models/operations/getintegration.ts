/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type GetIntegrationRequest = {
    /**
     * The integration ID that you created in Nango.
     */
    providerConfigKey: string;
    /**
     * If true, the response will contain the client ID, secret, scopes, auth_mode and app link - if applicable. include_creds is false by default.
     */
    includeCreds?: boolean | undefined;
};

export type GetIntegrationResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successfully returned an integration
     */
    getIntegrationResponse?: components.GetIntegrationResponse | undefined;
};

/** @internal */
export namespace GetIntegrationRequest$ {
    export const inboundSchema: z.ZodType<GetIntegrationRequest, z.ZodTypeDef, unknown> = z
        .object({
            providerConfigKey: z.string(),
            include_creds: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                include_creds: "includeCreds",
            });
        });

    export type Outbound = {
        providerConfigKey: string;
        include_creds?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetIntegrationRequest> = z
        .object({
            providerConfigKey: z.string(),
            includeCreds: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                includeCreds: "include_creds",
            });
        });
}

/** @internal */
export namespace GetIntegrationResponse$ {
    export const inboundSchema: z.ZodType<GetIntegrationResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            GetIntegrationResponse: components.GetIntegrationResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                GetIntegrationResponse: "getIntegrationResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        GetIntegrationResponse?: components.GetIntegrationResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetIntegrationResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getIntegrationResponse: components.GetIntegrationResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                getIntegrationResponse: "GetIntegrationResponse",
            });
        });
}
