/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type ListConnectionsRequest = {
    /**
     * Filter the list of connections based on this connection ID.
     */
    connectionId?: string | undefined;
};

export type ListConnectionsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successfully returned a list of connections
     */
    getConnectionResponse?: components.GetConnectionResponse | undefined;
};

/** @internal */
export namespace ListConnectionsRequest$ {
    export const inboundSchema: z.ZodType<ListConnectionsRequest, z.ZodTypeDef, unknown> = z.object(
        {
            connectionId: z.string().optional(),
        }
    );

    export type Outbound = {
        connectionId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListConnectionsRequest> =
        z.object({
            connectionId: z.string().optional(),
        });
}

/** @internal */
export namespace ListConnectionsResponse$ {
    export const inboundSchema: z.ZodType<ListConnectionsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            GetConnectionResponse: components.GetConnectionResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                GetConnectionResponse: "getConnectionResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        GetConnectionResponse?: components.GetConnectionResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListConnectionsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getConnectionResponse: components.GetConnectionResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                getConnectionResponse: "GetConnectionResponse",
            });
        });
}
