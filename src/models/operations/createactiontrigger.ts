/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type CreateActionTriggerRequest = {
    /**
     * The connection ID used to create the connection.
     */
    connectionId: string;
    /**
     * The integration ID used to create the connection (aka Unique Key).
     */
    providerConfigKey: string;
    createActionTriggerRequest: components.CreateActionTriggerRequest;
};

export type CreateActionTriggerResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Returns the result of the action
     */
    createActionTriggerResponse?: components.CreateActionTriggerResponse | undefined;
};

/** @internal */
export namespace CreateActionTriggerRequest$ {
    export type Inbound = {
        "Connection-Id": string;
        "Provider-Config-Key": string;
        CreateActionTriggerRequest: components.CreateActionTriggerRequest$.Inbound;
    };

    export const inboundSchema: z.ZodType<CreateActionTriggerRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "Connection-Id": z.string(),
            "Provider-Config-Key": z.string(),
            CreateActionTriggerRequest: components.CreateActionTriggerRequest$.inboundSchema,
        })
        .transform((v) => {
            return {
                connectionId: v["Connection-Id"],
                providerConfigKey: v["Provider-Config-Key"],
                createActionTriggerRequest: v.CreateActionTriggerRequest,
            };
        });

    export type Outbound = {
        "Connection-Id": string;
        "Provider-Config-Key": string;
        CreateActionTriggerRequest: components.CreateActionTriggerRequest$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateActionTriggerRequest> = z
        .object({
            connectionId: z.string(),
            providerConfigKey: z.string(),
            createActionTriggerRequest: components.CreateActionTriggerRequest$.outboundSchema,
        })
        .transform((v) => {
            return {
                "Connection-Id": v.connectionId,
                "Provider-Config-Key": v.providerConfigKey,
                CreateActionTriggerRequest: v.createActionTriggerRequest,
            };
        });
}

/** @internal */
export namespace CreateActionTriggerResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        CreateActionTriggerResponse?: components.CreateActionTriggerResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateActionTriggerResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            CreateActionTriggerResponse:
                components.CreateActionTriggerResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.CreateActionTriggerResponse === undefined
                    ? null
                    : { createActionTriggerResponse: v.CreateActionTriggerResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        CreateActionTriggerResponse?: components.CreateActionTriggerResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateActionTriggerResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            createActionTriggerResponse:
                components.CreateActionTriggerResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.createActionTriggerResponse === undefined
                    ? null
                    : { CreateActionTriggerResponse: v.createActionTriggerResponse }),
            };
        });
}
