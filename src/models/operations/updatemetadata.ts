/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type UpdateMetadataRequestBody = {};

export type UpdateMetadataRequest = {
    /**
     * The connection ID used to create the connection.
     */
    connectionId: string;
    /**
     * The integration ID used to create the connection (aka Unique Key).
     */
    providerConfigKey: string;
    requestBody: UpdateMetadataRequestBody;
};

/**
 * Successfully updated the metadata
 */
export type UpdateMetadataResponseBody = {};

export type UpdateMetadataResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successfully updated the metadata
     */
    object?: UpdateMetadataResponseBody | undefined;
};

/** @internal */
export namespace UpdateMetadataRequestBody$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<UpdateMetadataRequestBody, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateMetadataRequestBody> =
        z.object({});
}

/** @internal */
export namespace UpdateMetadataRequest$ {
    export type Inbound = {
        connectionId: string;
        "Provider-Config-Key": string;
        RequestBody: UpdateMetadataRequestBody$.Inbound;
    };

    export const inboundSchema: z.ZodType<UpdateMetadataRequest, z.ZodTypeDef, Inbound> = z
        .object({
            connectionId: z.string(),
            "Provider-Config-Key": z.string(),
            RequestBody: z.lazy(() => UpdateMetadataRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return {
                connectionId: v.connectionId,
                providerConfigKey: v["Provider-Config-Key"],
                requestBody: v.RequestBody,
            };
        });

    export type Outbound = {
        connectionId: string;
        "Provider-Config-Key": string;
        RequestBody: UpdateMetadataRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateMetadataRequest> = z
        .object({
            connectionId: z.string(),
            providerConfigKey: z.string(),
            requestBody: z.lazy(() => UpdateMetadataRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return {
                connectionId: v.connectionId,
                "Provider-Config-Key": v.providerConfigKey,
                RequestBody: v.requestBody,
            };
        });
}

/** @internal */
export namespace UpdateMetadataResponseBody$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<UpdateMetadataResponseBody, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateMetadataResponseBody> =
        z.object({});
}

/** @internal */
export namespace UpdateMetadataResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: UpdateMetadataResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateMetadataResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => UpdateMetadataResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: UpdateMetadataResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateMetadataResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => UpdateMetadataResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
