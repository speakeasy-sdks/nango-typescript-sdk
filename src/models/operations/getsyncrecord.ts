/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

/**
 * Set how the records are sorted. The default is id. The options are 'created_at', 'updated_at', 'id'.
 */
export enum SortBy {
    CreatedAt = "created_at",
    UpdatedAt = "updated_at",
    Id = "id",
}

/**
 * Set the order of results. The default is 'desc'. The options are 'desc' or 'asc'.
 */
export enum Order {
    Desc = "desc",
    Asc = "asc",
}

/**
 * Filter to only show results that have been added or updated or deleted. Helpful when used in conjuction with the delta parameter to retrieve a subset or records that were added, updated, or deleted with the latest sync.
 */
export enum QueryParamFilter {
    Added = "added",
    Updated = "updated",
    Deleted = "deleted",
}

export type GetSyncRecordRequest = {
    /**
     * The data model to fetch
     */
    model: string;
    /**
     * Timestamp, e.g. 2023-05-31T11:46:13.390Z. If passed only records added or updated after this timestamp are returned, otherwise all records are returned.
     */
    delta?: string | undefined;
    /**
     * The maximum number of records to return. If not passed, all records are returned.
     */
    limit?: number | undefined;
    /**
     * The number of records to skip. If not passed, no records are skipped.
     */
    offset?: number | undefined;
    /**
     * Set how the records are sorted. The default is id. The options are 'created_at', 'updated_at', 'id'.
     */
    sortBy?: SortBy | undefined;
    /**
     * Set the order of results. The default is 'desc'. The options are 'desc' or 'asc'.
     */
    order?: Order | undefined;
    /**
     * Filter to only show results that have been added or updated or deleted. Helpful when used in conjuction with the delta parameter to retrieve a subset or records that were added, updated, or deleted with the latest sync.
     */
    filter?: QueryParamFilter | undefined;
    /**
     * The connection ID used to create the connection.
     */
    connectionId: string;
    /**
     * The integration ID used to create the connection (aka Unique Key).
     */
    providerConfigKey: string;
};

export type GetSyncRecordResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successfully returned records
     */
    getSyncRecordResponse?: Array<components.GetSyncRecordResponse> | undefined;
};

/** @internal */
export namespace SortBy$ {
    export const inboundSchema = z.nativeEnum(SortBy);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Order$ {
    export const inboundSchema = z.nativeEnum(Order);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace QueryParamFilter$ {
    export const inboundSchema = z.nativeEnum(QueryParamFilter);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetSyncRecordRequest$ {
    export const inboundSchema: z.ZodType<GetSyncRecordRequest, z.ZodTypeDef, unknown> = z
        .object({
            model: z.string(),
            delta: z.string().optional(),
            limit: z.number().int().optional(),
            offset: z.number().int().optional(),
            sort_by: SortBy$.inboundSchema.optional(),
            order: Order$.inboundSchema.optional(),
            filter: QueryParamFilter$.inboundSchema.optional(),
            "Connection-Id": z.string(),
            "Provider-Config-Key": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                sort_by: "sortBy",
                "Connection-Id": "connectionId",
                "Provider-Config-Key": "providerConfigKey",
            });
        });

    export type Outbound = {
        model: string;
        delta?: string | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
        sort_by?: string | undefined;
        order?: string | undefined;
        filter?: string | undefined;
        "Connection-Id": string;
        "Provider-Config-Key": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSyncRecordRequest> = z
        .object({
            model: z.string(),
            delta: z.string().optional(),
            limit: z.number().int().optional(),
            offset: z.number().int().optional(),
            sortBy: SortBy$.outboundSchema.optional(),
            order: Order$.outboundSchema.optional(),
            filter: QueryParamFilter$.outboundSchema.optional(),
            connectionId: z.string(),
            providerConfigKey: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                sortBy: "sort_by",
                connectionId: "Connection-Id",
                providerConfigKey: "Provider-Config-Key",
            });
        });
}

/** @internal */
export namespace GetSyncRecordResponse$ {
    export const inboundSchema: z.ZodType<GetSyncRecordResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            GetSyncRecordResponse: z
                .array(components.GetSyncRecordResponse$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                GetSyncRecordResponse: "getSyncRecordResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        GetSyncRecordResponse?: Array<components.GetSyncRecordResponse$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSyncRecordResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getSyncRecordResponse: z
                .array(components.GetSyncRecordResponse$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                getSyncRecordResponse: "GetSyncRecordResponse",
            });
        });
}
