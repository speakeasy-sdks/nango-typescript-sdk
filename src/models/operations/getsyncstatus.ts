/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type GetSyncStatusRequest = {
    /**
     * The ID of the integration you established within Nango
     */
    providerConfigKey: string;
    /**
     * The name of the syncs you want to fetch a status for. Pass in "*" to return all syncs per the integration
     */
    syncs: string;
    /**
     * The ID of the connection. If omitted, all connections will be surfaced.
     */
    connectionId?: string | undefined;
};

export type GetSyncStatusResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successfully returned a list of syncs and their status
     */
    getSyncStatusResponse?: components.GetSyncStatusResponse | undefined;
};

/** @internal */
export namespace GetSyncStatusRequest$ {
    export const inboundSchema: z.ZodType<GetSyncStatusRequest, z.ZodTypeDef, unknown> = z
        .object({
            provider_config_key: z.string(),
            syncs: z.string(),
            connection_id: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                provider_config_key: "providerConfigKey",
                connection_id: "connectionId",
            });
        });

    export type Outbound = {
        provider_config_key: string;
        syncs: string;
        connection_id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSyncStatusRequest> = z
        .object({
            providerConfigKey: z.string(),
            syncs: z.string(),
            connectionId: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                providerConfigKey: "provider_config_key",
                connectionId: "connection_id",
            });
        });
}

/** @internal */
export namespace GetSyncStatusResponse$ {
    export const inboundSchema: z.ZodType<GetSyncStatusResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            GetSyncStatusResponse: components.GetSyncStatusResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                GetSyncStatusResponse: "getSyncStatusResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        GetSyncStatusResponse?: components.GetSyncStatusResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSyncStatusResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getSyncStatusResponse: components.GetSyncStatusResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                getSyncStatusResponse: "GetSyncStatusResponse",
            });
        });
}
