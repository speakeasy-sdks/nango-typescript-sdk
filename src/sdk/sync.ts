/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as components from "../models/components";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export class Sync extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Returns data synced with Nango Sync, allowing for advanced filtering, sorting, and pagination options.
     *
     * @remarks
     * Returns data synced with Nango Sync
     */
    async getRecord(
        request: operations.GetSyncRecordRequest,
        options?: RequestOptions
    ): Promise<operations.GetSyncRecordResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetSyncRecordRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/sync/records")();

        const query$ = encodeFormQuery$({
            delta: payload$.delta,
            filter: payload$.filter,
            limit: payload$.limit,
            model: payload$.model,
            offset: payload$.offset,
            order: payload$.order,
            sort_by: payload$.sort_by,
        });

        headers$.set(
            "Connection-Id",
            encodeSimple$("Connection-Id", payload$["Connection-Id"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Provider-Config-Key",
            encodeSimple$("Provider-Config-Key", payload$["Provider-Config-Key"], {
                explode: false,
                charEncoding: "none",
            })
        );
        const context = { operationID: "getSyncRecord", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["400", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetSyncRecordResponse>()
            .json(200, operations.GetSyncRecordResponse$, { key: "GetSyncRecordResponse" })
            .json(400, errors.Response400$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Triggers an additional, one-off execution of specified sync(s) for a given connection or all applicable connections if no connection is specified.
     *
     * @remarks
     * Triggers an additional, one-off execution of specified sync(s) (for a given connection or all applicable connections if no connection is specified).
     */
    async createTrigger(
        request?: components.CreateSyncTriggerRequest | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateSyncTriggerResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                components.CreateSyncTriggerRequest$.outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/sync/trigger")();

        const query$ = "";

        const context = {
            operationID: "createSyncTrigger",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const doOptions = { context, errorCodes: ["400", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "POST", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.CreateSyncTriggerResponse>()
            .void(200, operations.CreateSyncTriggerResponse$)
            .json(400, errors.Response400$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Starts the continuous execution of specified sync(s) for a given connection or all applicable connections if no connection is specified.
     *
     * @remarks
     * Starts the continuous execution of specified sync(s) (for a given connection or all applicable connections if no connection is specified).
     */
    async start(
        request?: components.CreateSyncStartRequest | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateSyncStartResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.CreateSyncStartRequest$.outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/sync/start")();

        const query$ = "";

        const context = { operationID: "createSyncStart", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["400", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "POST", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.CreateSyncStartResponse>()
            .void(200, operations.CreateSyncStartResponse$)
            .json(400, errors.Response400$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Pauses the continuous execution of specified sync(s) for a given connection or all applicable connections if no connection is specified.
     *
     * @remarks
     * Pauses the continuous execution of specified sync(s) (for a given connection or all applicable connections if no connection is specified).
     */
    async pause(
        request?: components.CreateSyncPauseRequest | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateSyncPauseResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.CreateSyncPauseRequest$.outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/sync/pause")();

        const query$ = "";

        const context = { operationID: "createSyncPause", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["400", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "POST", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.CreateSyncPauseResponse>()
            .void(200, operations.CreateSyncPauseResponse$)
            .json(400, errors.Response400$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get the status of specified sync(s) for a given connection or all applicable connections if no connection is specified.
     *
     * @remarks
     * Get the status of specified sync(s) (for a given connection or all applicable connections if no connection is specified)
     */
    async getStatus(
        providerConfigKey: string,
        syncs: string,
        connectionId?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.GetSyncStatusResponse> {
        const input$: operations.GetSyncStatusRequest = {
            providerConfigKey: providerConfigKey,
            syncs: syncs,
            connectionId: connectionId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetSyncStatusRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/sync/status")();

        const query$ = encodeFormQuery$({
            connection_id: payload$.connection_id,
            provider_config_key: payload$.provider_config_key,
            syncs: payload$.syncs,
        });

        const context = { operationID: "getSyncStatus", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["400", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetSyncStatusResponse>()
            .json(200, operations.GetSyncStatusResponse$, { key: "GetSyncStatusResponse" })
            .json(400, errors.Response400$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Override a sync's default frequency for a specific connection or revert to the default frequency.
     *
     * @remarks
     * Override a sync's default frequency for a specific connection, or revert to the default frequency.
     */
    async updateFrequency(
        request: components.UpdateConnectionFrequencyRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateConnectionFrequencyResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.UpdateConnectionFrequencyRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/sync/update-connection-frequency")();

        const query$ = "";

        const context = {
            operationID: "updateConnectionFrequency",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const doOptions = { context, errorCodes: ["400", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "PUT", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.UpdateConnectionFrequencyResponse>()
            .json(200, operations.UpdateConnectionFrequencyResponse$, {
                key: "UpdateConnectionFrequencyResponse",
            })
            .json(400, errors.Response400$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
