/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export class Proxy extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Make a GET request with the Proxy.
     *
     * @remarks
     * Make a GET request with the Proxy.
     */
    async get(
        input: operations.GetProxyRequest,
        options?: RequestOptions
    ): Promise<operations.GetProxyResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input,
            (value$) => operations.GetProxyRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            anyPath: enc$.encodeSimple("anyPath", payload$.anyPath, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/proxy/{anyPath}")(pathParams$);

        const query$ = [
            enc$.encodeForm("$ANY_QUERY_PARAMS", payload$.$ANY_QUERY_PARAMS, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "Base-Url-Override",
            enc$.encodeSimple("Base-Url-Override", payload$["Base-Url-Override"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Connection-Id",
            enc$.encodeSimple("Connection-Id", payload$["Connection-Id"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Decompress",
            enc$.encodeSimple("Decompress", payload$.Decompress, {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Provider-Config-Key",
            enc$.encodeSimple("Provider-Config-Key", payload$["Provider-Config-Key"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Retries",
            enc$.encodeSimple("Retries", payload$.Retries, { explode: false, charEncoding: "none" })
        );
        headers$.set(
            "nango-proxy-$ANY_HEADER",
            enc$.encodeSimple("nango-proxy-$ANY_HEADER", payload$["nango-proxy-$ANY_HEADER"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const context = { operationID: "getProxy" };
        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request = this.createRequest$(
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return schemas$.parse(
            undefined,
            () => operations.GetProxyResponse$.inboundSchema.parse(responseFields$),
            "Response validation failed"
        );
    }

    /**
     * Make a POST request with the Proxy.
     *
     * @remarks
     * Make a POST request with the Proxy.
     */
    async create(
        input: operations.CreateProxyRequest,
        options?: RequestOptions
    ): Promise<operations.CreateProxyResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input,
            (value$) => operations.CreateProxyRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.CreateProxyRequest, { explode: true });

        const pathParams$ = {
            anyPath: enc$.encodeSimple("anyPath", payload$.anyPath, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/proxy/{anyPath}")(pathParams$);

        const query$ = "";

        headers$.set(
            "Base-Url-Override",
            enc$.encodeSimple("Base-Url-Override", payload$["Base-Url-Override"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Connection-Id",
            enc$.encodeSimple("Connection-Id", payload$["Connection-Id"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Decompress",
            enc$.encodeSimple("Decompress", payload$.Decompress, {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Provider-Config-Key",
            enc$.encodeSimple("Provider-Config-Key", payload$["Provider-Config-Key"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Retries",
            enc$.encodeSimple("Retries", payload$.Retries, { explode: false, charEncoding: "none" })
        );
        headers$.set(
            "nango-proxy-$ANY_HEADER",
            enc$.encodeSimple("nango-proxy-$ANY_HEADER", payload$["nango-proxy-$ANY_HEADER"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const context = { operationID: "createProxy" };
        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request = this.createRequest$(
            { method: "POST", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return schemas$.parse(
            undefined,
            () => operations.CreateProxyResponse$.inboundSchema.parse(responseFields$),
            "Response validation failed"
        );
    }

    /**
     * Make a PUT request with the Proxy.
     *
     * @remarks
     * Make a PUT request with the Proxy.
     */
    async update(
        input: operations.PutProxyRequest,
        options?: RequestOptions
    ): Promise<operations.PutProxyResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input,
            (value$) => operations.PutProxyRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.PutProxyRequest, { explode: true });

        const pathParams$ = {
            anyPath: enc$.encodeSimple("anyPath", payload$.anyPath, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/proxy/{anyPath}")(pathParams$);

        const query$ = "";

        headers$.set(
            "Base-Url-Override",
            enc$.encodeSimple("Base-Url-Override", payload$["Base-Url-Override"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Connection-Id",
            enc$.encodeSimple("Connection-Id", payload$["Connection-Id"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Decompress",
            enc$.encodeSimple("Decompress", payload$.Decompress, {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Provider-Config-Key",
            enc$.encodeSimple("Provider-Config-Key", payload$["Provider-Config-Key"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Retries",
            enc$.encodeSimple("Retries", payload$.Retries, { explode: false, charEncoding: "none" })
        );
        headers$.set(
            "nango-proxy-$ANY_HEADER",
            enc$.encodeSimple("nango-proxy-$ANY_HEADER", payload$["nango-proxy-$ANY_HEADER"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const context = { operationID: "putProxy" };
        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request = this.createRequest$(
            { method: "PUT", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return schemas$.parse(
            undefined,
            () => operations.PutProxyResponse$.inboundSchema.parse(responseFields$),
            "Response validation failed"
        );
    }

    /**
     * Make a PATCH request with the Proxy.
     *
     * @remarks
     * Make a PATCH request with the Proxy.
     */
    async patch(
        input: operations.PatchProxyRequest,
        options?: RequestOptions
    ): Promise<operations.PatchProxyResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input,
            (value$) => operations.PatchProxyRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.PatchProxyRequest, { explode: true });

        const pathParams$ = {
            anyPath: enc$.encodeSimple("anyPath", payload$.anyPath, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/proxy/{anyPath}")(pathParams$);

        const query$ = "";

        headers$.set(
            "Base-Url-Override",
            enc$.encodeSimple("Base-Url-Override", payload$["Base-Url-Override"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Connection-Id",
            enc$.encodeSimple("Connection-Id", payload$["Connection-Id"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Decompress",
            enc$.encodeSimple("Decompress", payload$.Decompress, {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Provider-Config-Key",
            enc$.encodeSimple("Provider-Config-Key", payload$["Provider-Config-Key"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Retries",
            enc$.encodeSimple("Retries", payload$.Retries, { explode: false, charEncoding: "none" })
        );
        headers$.set(
            "nango-proxy-$ANY_HEADER",
            enc$.encodeSimple("nango-proxy-$ANY_HEADER", payload$["nango-proxy-$ANY_HEADER"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const context = { operationID: "patchProxy" };
        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request = this.createRequest$(
            { method: "PATCH", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return schemas$.parse(
            undefined,
            () => operations.PatchProxyResponse$.inboundSchema.parse(responseFields$),
            "Response validation failed"
        );
    }

    /**
     * Make a DELETE request with the Proxy.
     *
     * @remarks
     * Make a DELETE request with the Proxy.
     */
    async deletes(
        input: operations.DeleteProxyRequest,
        options?: RequestOptions
    ): Promise<operations.DeleteProxyResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input,
            (value$) => operations.DeleteProxyRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            anyPath: enc$.encodeSimple("anyPath", payload$.anyPath, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/proxy/{anyPath}")(pathParams$);

        const query$ = [
            enc$.encodeForm("$ANY_QUERY_PARAMS", payload$.$ANY_QUERY_PARAMS, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "Base-Url-Override",
            enc$.encodeSimple("Base-Url-Override", payload$["Base-Url-Override"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Connection-Id",
            enc$.encodeSimple("Connection-Id", payload$["Connection-Id"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Decompress",
            enc$.encodeSimple("Decompress", payload$.Decompress, {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Provider-Config-Key",
            enc$.encodeSimple("Provider-Config-Key", payload$["Provider-Config-Key"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Retries",
            enc$.encodeSimple("Retries", payload$.Retries, { explode: false, charEncoding: "none" })
        );
        headers$.set(
            "nango-proxy-$ANY_HEADER",
            enc$.encodeSimple("nango-proxy-$ANY_HEADER", payload$["nango-proxy-$ANY_HEADER"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const context = { operationID: "deleteProxy" };
        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request = this.createRequest$(
            { method: "DELETE", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return schemas$.parse(
            undefined,
            () => operations.DeleteProxyResponse$.inboundSchema.parse(responseFields$),
            "Response validation failed"
        );
    }
}
