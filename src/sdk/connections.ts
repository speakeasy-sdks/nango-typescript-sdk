/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as errors from "../models/errors/index.js";
import * as operations from "../models/operations/index.js";
import * as z from "zod";

export class Connections extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Returns a list of connections, optionally filtered by connection ID.
     *
     * @remarks
     * Returns a list of connections
     */
    async list(
        connectionId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.GetConnectionResponse> {
        const input$: operations.ListConnectionsRequest = {
            connectionId: connectionId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListConnectionsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/connection")();

        const query$ = encodeFormQuery$({
            connectionId: payload$.connectionId,
        });

        const context = { operationID: "listConnections", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<components.GetConnectionResponse>()
            .json(200, components.GetConnectionResponse$)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Adds a connection using an existing access token, along with optional OAuth or basic authentication credentials, and additional metadata or configuration.
     *
     * @remarks
     * Adds a connection for which you already have an access token
     */
    async create(
        request: components.CreateConnectionRequest,
        options?: RequestOptions
    ): Promise<void> {
        const input$ = request;
        void input$; // request input is unused
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/connection")();

        const query$ = "";

        const context = { operationID: "createConnection", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["400", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "POST", path: path$, headers: headers$, query: query$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .json(400, errors.Response400$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Returns details of a specific connection identified by its connection ID, associated with the specified integration, with optional parameters for force refresh and returning the refresh token.
     *
     * @remarks
     * Returns a specific connection
     */
    async get(
        connectionId: string,
        providerConfigKey: string,
        forceRefresh?: boolean | undefined,
        refreshToken?: boolean | undefined,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.GetConnectionsRequest = {
            connectionId: connectionId,
            providerConfigKey: providerConfigKey,
            forceRefresh: forceRefresh,
            refreshToken: refreshToken,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetConnectionsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            connectionId: encodeSimple$("connectionId", payload$.connectionId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/connection/{connectionId}")(pathParams$);

        const query$ = encodeFormQuery$({
            force_refresh: payload$.force_refresh,
            provider_config_key: payload$.provider_config_key,
            refresh_token: payload$.refresh_token,
        });

        const context = { operationID: "getConnections", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["400", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .json(400, errors.Response400$, { err: true })
            .json(404, errors.Response404$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Deletes a specific connection identified by its connection ID, associated with the specified integration.
     *
     * @remarks
     * Deletes a specific connection
     */
    async delete(
        connectionId: string,
        providerConfigKey: string,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.DeleteConnectionsRequest = {
            connectionId: connectionId,
            providerConfigKey: providerConfigKey,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteConnectionsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            connectionId: encodeSimple$("connectionId", payload$.connectionId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/connection/{connectionId}")(pathParams$);

        const query$ = encodeFormQuery$({
            provider_config_key: payload$.provider_config_key,
        });

        const context = {
            operationID: "deleteConnections",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const doOptions = { context, errorCodes: ["400", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "DELETE", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<void>()
            .void(204, z.void())
            .json(400, errors.Response400$, { err: true })
            .json(404, errors.Response404$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Set custom metadata for the specified connection.
     *
     * @remarks
     * Set custom metadata for the connection.
     */
    async createMetadata(
        connectionId: string,
        providerConfigKey: string,
        requestBody: operations.CreateMetadataRequestBody,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.CreateMetadataRequest = {
            connectionId: connectionId,
            providerConfigKey: providerConfigKey,
            requestBody: requestBody,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateMetadataRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            connectionId: encodeSimple$("connectionId", payload$.connectionId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/connection/{connectionId}/metadata")(pathParams$);

        const query$ = "";

        headers$.set(
            "Provider-Config-Key",
            encodeSimple$("Provider-Config-Key", payload$["Provider-Config-Key"], {
                explode: false,
                charEncoding: "none",
            })
        );
        const context = { operationID: "createMetadata", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["400", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "POST", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<void>()
            .void(201, z.void())
            .json(400, errors.Response400$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update custom metadata for the specified connection.
     *
     * @remarks
     * Update custom metadata for the connection.
     */
    async update(
        connectionId: string,
        providerConfigKey: string,
        requestBody: operations.UpdateMetadataRequestBody,
        options?: RequestOptions
    ): Promise<operations.UpdateMetadataResponseBody> {
        const input$: operations.UpdateMetadataRequest = {
            connectionId: connectionId,
            providerConfigKey: providerConfigKey,
            requestBody: requestBody,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateMetadataRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            connectionId: encodeSimple$("connectionId", payload$.connectionId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/connection/{connectionId}/metadata")(pathParams$);

        const query$ = "";

        headers$.set(
            "Provider-Config-Key",
            encodeSimple$("Provider-Config-Key", payload$["Provider-Config-Key"], {
                explode: false,
                charEncoding: "none",
            })
        );
        const context = { operationID: "updateMetadata", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["400", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "PATCH", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.UpdateMetadataResponseBody>()
            .json(200, operations.UpdateMetadataResponseBody$)
            .json(400, errors.Response400$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
