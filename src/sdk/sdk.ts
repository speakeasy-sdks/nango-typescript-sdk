/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK } from "../lib/sdks";
import { Actions } from "./actions";
import { Connections } from "./connections";
import { Environment } from "./environment";
import { Integrations } from "./integrations";
import { Proxy } from "./proxy";
import { Records } from "./records";
import { Sync } from "./sync";

export class Nango extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _integrations?: Integrations;
    get integrations(): Integrations {
        return (this._integrations ??= new Integrations(this.options$));
    }

    private _connections?: Connections;
    get connections(): Connections {
        return (this._connections ??= new Connections(this.options$));
    }

    private _records?: Records;
    get records(): Records {
        return (this._records ??= new Records(this.options$));
    }

    private _sync?: Sync;
    get sync(): Sync {
        return (this._sync ??= new Sync(this.options$));
    }

    private _actions?: Actions;
    get actions(): Actions {
        return (this._actions ??= new Actions(this.options$));
    }

    private _environment?: Environment;
    get environment(): Environment {
        return (this._environment ??= new Environment(this.options$));
    }

    private _proxy?: Proxy;
    get proxy(): Proxy {
        return (this._proxy ??= new Proxy(this.options$));
    }
}
